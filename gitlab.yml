name: gitlab-cli
version: "0.0.1"
author: Vinicius <senna.vmd@gmail.com>
about: Cli to interface with Gitlab's REST API
base_endpoint: https://gitlab.com/api/v4
vars:
    done_label: "workflow:Done"
headers:
    Private-Token: "{{env.GITLAB_TOKEN}}"
args:
    - config:
        short: c
        long: config
        value_name: FILE
        help: Sets a custom config file
        takes_value: true
    - verbose:
        short: v
        multiple: true
        help: Sets the level of verbosity
subcommands:
    - show:
        about: Show issue data
        path: /projects/{{env.GITLAB_PROJECT_ID}}/issues/{{args.ISSUE_ID}}
        args:
            - ISSUE_ID:
                help: Id of the issue to show
                required: true
        response_template: issue.j2

    - project:
        about: Show project data
        path: /projects/{{env.GITLAB_PROJECT_ID}}

    - project_users:
        about: Show project users
        path: /projects/{{env.GITLAB_PROJECT_ID}}/users

    - issues:
        about: List issues
        path: /projects/{{env.GITLAB_PROJECT_ID}}/issues
        query_params:
            labels: "{{args.labels}}"
            milestone: "{{args.milestone}}"
            state: "{{args.state}}"
        args:
            - labels:
                short: l
                long: labels
                help: filter by labels
                takes_value: true
            - milestone:
                short: m
                long: milestone
                help: filter by milestone name
                takes_value: true
            - state:
                short: s
                long: state
                help: filter by state (use opened and closed as values)
                takes_value: true
        response_template: list.j2

    - newissue:
        about: Create an issue
        path: /projects/{{env.GITLAB_PROJECT_ID}}/issues
        method: POST
        args:
            - TITLE:
                help: Issue title
                required: true
            - DESCRIPTION:
                short: d
                long: description
                help: Issue description
                takes_value: true
            - LABELS:
                short: l
                long: labels
                help: labels, comma separated values
                takes_value: true
        body:
            title: "{{ args.TITLE }}"
            description: "{%- if args.DESCRIPTION is defined -%}{{args.DESCRIPTION}}{%- endif -%}"
            labels: "{%- if args.LABELS is defined -%}{{args.LABELS}}{%- endif -%}"
        response_template: issue.j2

    - edit:
        about: Edit an issue
        path: /projects/{{env.GITLAB_PROJECT_ID}}/issues/{{args.ISSUE_ID}}
        method: PUT
        args:
            - ISSUE_ID:
                help: Id of the issue to edit
                required: true
            - labels:
                short: l
                long: labels
                help: labels, comma separated values
                takes_value: true
            - description:
                short: d
                long: description
                help: Issue description
                takes_value: true
            - milestone_id:
                short: m
                long: milestone_id
                help: Milestone ID
                takes_value: true
            - title:
                short: T
                long: title
                help: Issue title
                takes_value: true
            - assignee:
                short: a
                long: assignee
                help: List of user ids to assign the issue to, 0 unassigns everyone
                takes_value: true
        body:
            assignee_ids: "{{ args.assignee }}"
            description: "{{ args.description }}"
            title: "{{ args.title }}"
            labels: "{{ args.labels }}"
            milestone_id: "{{ args.milestone_id }}"
            state_event: "{%- if args.labels is containing(vars.done_label) -%}close{%- else -%}reopen{%- endif -%}"
        response_template: issue.j2

    - boards:
        about: List boards
        path: /projects/{{env.GITLAB_PROJECT_ID}}/boards

    - milestones:
        about: Get project milestones
        path: /projects/{{env.GITLAB_PROJECT_ID}}/milestones

    - add_milestone:
        about: Create or edit a milestone (project milestone)
        path: "/projects/{{env.GITLAB_PROJECT_ID}}/milestones{%- if args.milestone is defined -%}/{{args.milestone}}{%- endif -%}"
        method: "{%- if args.edit is defined -%}PUT{%- else -%}POST{%- endif -%}"
        args:
            - TITLE:
                help: The milestone title
                required: true
            - description:
                short: d
                long: description
                help: Optional description of the milestone
                takes_value: true
            - due_date:
                short: D
                long: due_date
                help: Optional due date for the milestone (YYYYMMDD)
                takes_value: true
            - start_date:
                short: s
                long: start_date
                help: Optional start date for the milestone (YYYYMMDD)
                takes_value: true
            - edit:
                short: e
                long: edit
                help: Set command to edit the milestone (requires milestone id)
            - milestone:
                short: m
                long: milestone
                help: Milestone id
                takes_value: true
        body:
            title: "{{ args.TITLE }}"
            description: "{%- if args.description is defined -%}{{ args.description }}{%- endif -%}"
            due_date: "{{ args.due_date }}"
            start_date: "{%- if args.start_date is defined -%}{{ args.start_date }}{%- endif -%}"
            milestone_id: "{%- if args.milestone is defined -%}{{ args.milestone }}{%- endif -%}"

# Scripts
    - new:
        about: Create an issue in the ready for dev column
        args:
            - TITLE:
                help: Issue title
                required: true
            - description:
                short: d
                long: description
                help: Issue description
                takes_value: true
        script: |
            LABELS="workflow:Ready for development"
            {% if args.description is defined%}
                gitlab newissue -l "$LABELS" -d "{{args.description}}" "{{args.TITLE}}"
            {% else %}
                gitlab newissue -l "$LABELS" "{{args.TITLE}}"
            {% endif %}
        response_template: issue.j2
    - cleanlabels:
        about: Return the issue's list of labels without workflow labels
        args:
            - ISSUE_ID:
                help: Id of the issue
                required: true
        script: |
            LABELS=$(gitlab show {{ args.ISSUE_ID }} | grep Labels: | sed 's/Labels:[ ]\{0,\}//')
            NO_WORKFLOW_LABELS=$(echo $LABELS | sed 's/[ ]\{0,\}workflow:[A-Z a-z]\{1,\}[,]\{0,1\}//g' | sed 's/^[ ]\{1,\}//' | sed 's/[ ]\{0,\}[,]\{0,\}[ ]\{0,\}$//')
            echo $NO_WORKFLOW_LABELS

    - code:
        about: Move issue to code in progress column
        args:
            - ISSUE_ID:
                help: Id of the issue to code
                required: true
        script: |
            LABELS=$(gitlab cleanlabels {{ args.ISSUE_ID }})
            if [ -z "$LABELS" ]; then
                gitlab edit -q -a {{env.GITLAB_USER_ID}} -l "workflow:In progress" {{ args.ISSUE_ID }}
            else
                gitlab edit -q -a {{env.GITLAB_USER_ID}} -l "$LABELS,workflow:In progress" {{ args.ISSUE_ID }}
            fi
            gitlab show {{ args.ISSUE_ID }}

    - done:
        about: Move ticket to done column
        args:
            - ISSUE_ID:
                help: Id of the issue to move
                required: true
        script: |
            LABELS=$(gitlab cleanlabels {{ args.ISSUE_ID }})
            if [ -z "$LABELS" ]; then
                gitlab edit -q -a 0 -l "{{ vars.done_label }}" {{ args.ISSUE_ID }}
            else
                gitlab edit -q -a 0 -l "$LABELS,{{ vars.done_label }}" {{ args.ISSUE_ID }}
            fi
            gitlab board

    - milestone_by_name:
        about: Return milestone id by a substring name
        args:
            - MILESTONE_NAME:
                help: Substring of the milestone name
                required: true
            - name:
                short: n
                long: name
                help: Return the milestone title instead of the id
        script: |
            {%- if args.name is not defined -%}
                echo $(gitlab milestones | jq -r 'map(select(.title | test("{{args.MILESTONE_NAME}}";"i")))|.[0].id')
            {%- else -%}
                echo $(gitlab milestones | jq -r 'map(select(.title | test("{{args.MILESTONE_NAME}}";"i")))|.[0].title')
            {%- endif -%}

    - milestone:
        about: List milestone tickets by the milestone name (substring)
        args:
            - MILESTONE_NAME:
                help: Substring of the milestone name
                required: true
        script: |
            MILESTONE_NAME=$(gitlab milestone_by_name -n "{{args.MILESTONE_NAME}}")
            gitlab issues -m "$MILESTONE_NAME"

    - add_milestone:
        about: Add issue to milestone
        args:
            - ISSUE_ID:
                help: Issue to add
                required: true
            - MILESTONE_NAME:
                help: Substring of the milestone name
                required: true
        script: |
            MILESTONE_ID=$(gitlab milestone_by_name "{{args.MILESTONE_NAME}}")
            gitlab edit -m "$MILESTONE_ID" "{{args.ISSUE_ID}}"

    - board:
        about: Print board
        args:
            - board_no:
                help: board number (default 0)
                short: b
                long: board_no
                takes_value: true
        script: |
            BOARD_INDEX="{%- if board_no is defined -%}board_no{%- else -%}0{%- endif -%}"
            export LISTS=$(gitlab boards | jq -r ".[${BOARD_INDEX}].lists | map(.label.name)")
            export ISSUES=$(gitlab issues -R -s opened)
            export WIDTH=$(tput cols)
            python {{scmd.scmd_config_base_path}}/templates/print_board.py
